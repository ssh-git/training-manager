@using PagedList.Mvc
@model CoursesWithoutSpecializationsViewModels.IndexControllableViewModel

@section Title{
    Categories Without Cource Specializations
}

<h2>Categories Without Cource Specializations</h2>

@Html.DisplayForModel("IControllableView")

<table class="table table-striped, table-condensed, table-responsive">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Metadata.TrainingProviderName)
        </th>
        <th>
            @Html.ActionLink(Html.DisplayNameFor(model => model.Metadata.CategoryName).ToString(), "Index", Model.Params.ToRouteValueDictionary(Model.SortState.CategorySortState))
        </th>
        <th>
            @Html.ActionLink(Html.DisplayNameFor(model => model.Metadata.CourseCount).ToString(), "Index", Model.Params.ToRouteValueDictionary(Model.SortState.CourseCountSortState))
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model.PagedList)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.TrainingProviderName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CategoryName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CourseCount)
            </td>

            <td>
                @Html.ActionLink("Set Specializations", "CategoryCourses", Model.Params.ToRouteValueDictionary().Include(new { item.CategoryId }))
            </td>
        </tr>
    }

</table>

Page @Model.PagedList.PageNumber of @Model.PagedList.PageCount


@Html.PagedListPager(Model.PagedList, page => Url.Action("Index", Model.Params.ToRouteValueDictionary(page)))

@section scripts
{
    @{ Html.RenderPartial("_IControllableViewScript");}
}

